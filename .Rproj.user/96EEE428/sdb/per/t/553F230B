{
    "contents" : "#BaalChIP: functions for argument checking\n#Ines de Santiago and Wei Liu (2015) \n\nreadsamplesheet <- function(samplesheet) {\n\t# Read samplesheet\n    try(samples <- read.delim(samplesheet,stringsAsFactors=F), silent = TRUE)\n    if (!exists(\"samples\")) { stop('could not read samplesheet',call.=FALSE) } \n    \n    #check if colnames exist\n    colnames_in_file = c('group_name', 'target', 'replicate_number', 'bam_name', 'bed_name')\n    if (! all(colnames_in_file %in% colnames(samples))) {\n    \t\tstop(paste('samplesheet must contain the following colnames:',  paste(colnames_in_file, collapse=\",\")),call.=FALSE) \n    }\n    \n    # make sampleIDs\n    if (! \"sampleID\" %in% colnames(samples)){\n      sampleID <- paste(samples[,'group_name'],samples[,'target'],samples[,'replicate_number'], sep='_')\n\t    samples$sampleID <- sampleID\n    }\n\t\n\t  #Check duplicated names\n\t  if (any(duplicated(sampleID))) {\n\t\t  i <- which(duplicated(sampleID))\n\t\t  stop(paste('Error: duplicated sample IDs', sampleID[i]),call.=FALSE)\n\t  }\n \n    #check if all files exist in samplesheet\n    for (rownr in 1:nrow(samples)) {\n        x <- samples[rownr,]\n        if (!file.exists(x[[\"bam_name\"]]))\n            {stop(paste('BAM file does not exist:', x[[\"bam_name\"]]),call.=FALSE)}\n        if (!file.exists(paste0(x[[\"bam_name\"]],\".bai\")))\n        {stop(paste('BAM index file does not exist:', paste0(x[[\"bam_name\"]],\".bai\")),call.=FALSE)}\n        if (!file.exists(x[[\"bed_name\"]]))\n            {stop(paste('BED file does not exist:', x[[\"bed_name\"]]),call.=FALSE)}\n    }\n        \n    \n    #return\n    cat(\"-samplesheet checks: OK!\\n\")\n    return(samples)\n}\n\nreadhettables <- function(hets) {\n    for (filename in hets) {\n        if (!file.exists(filename)) { stop(paste('hetSNP file does not exist:',filename),call.=FALSE) } \n    }\n}\n\ntrycreatedir <- function(dir) {\n\tif (!is.null(dir)) {\n\t\tif (!file.exists(dir)){\n\t\t\ttry(dir.create(dir), silent=TRUE)\n\t\t\tif (!file.exists(dir)){ \n\t\t\t\tstop (paste('failed to create simul_output dir:', dir),call.=FALSE)\n\t\t\t}\n\t\t}\n\t}\n}\n\ncheckmatchingnames <- function(names1, names2) {\n\tif (length(names1) > length(names2)) {warning(paste(\"failed for\", setdiff(names1, names2)),call.=FALSE)}\n    if (length(names2) > length(names1)) {stop(paste(\"failed for\", setdiff(names2, names1)),call.=FALSE)}\n    if (!all(names2 %in% names1)) {stop(paste(\"failed for\", names2, names1),call.=FALSE)}\n    \n}\n\nBaalChIP.checks <- function(name, param){\n\t\n\tif (name == \"samplesheet\")\n\t\t{\n\t\tsamples <- readsamplesheet(param)\n\t\treturn(samples)\n\t}\n\t\n\tif (name == \"hets\")\n\t\t{\n\t\treadhettables(param)\n\t}\n\t\n\tif (name == \"min_base_quality\") {\n\t\tif (class(param) != 'numeric') {\n\t\t\tstop ('min_base_quality must be a numberic value',call.=FALSE)\n\t\t}\n\t}\n\t\n\tif (name == \"min_mapq\") {\n\t\tif (class(param) != 'numeric') {\n\t\t\tstop ('min_mapq must be a numberic value',call.=FALSE)\n\t\t}\n\t}\n\t\n\tif (name == \"RegionsToFilter\" | name == \"RegionsToKeep\") {\n\t\tif (is.character(param)) {\n\t\t\tregion_names <- param #Regions contains the names to lists in the environment\n\t\t\tparam <- lapply(region_names, get)\n\t\t\tnames(param) <- region_names\n\t\t}\n\t\n\t\tif (!is.null(param) &  !is.character(param) & is.null(names(param))) \n\t\t\t{\n\t\t\tstop(\"Error: RegionsToFilter needs to be a named list. No names found\",call.=FALSE)\n\t\t}\n\t\t\n\t\treturn(param)\n\t}\n\t\n\tif (name == \"FiltIntBias\") {\n\t\tif (!is.logical(param)) {\n\t\t\tstop (paste('FiltIntBias must be either TRUE or FALSE'),call.=FALSE)\n\t\t}\n\t}\n\t\n\tif (name == \"Only1Allele\") {\n\t\tif (!is.logical(param)) {\n\t\t\tstop ('Only1Allele must be either TRUE or FALSE',call.=FALSE)\n\t\t}\n\t}\n\t\n\tif (name == \"simul_output\") {\n\t\ttrycreatedir(param)\n\t}\n\t\n\tif (name == \"Iter\") {\n\t\tif (class(param) != 'numeric') {\n\t\t\tstop ('Iter must be a numberic value',call.=FALSE)\n\t\t}\n\t}\n\t\n\tif (name == \"conf_level\") {\n\t\tif (class(param) != 'numeric') {\n\t\t\tstop ('conf_level must be a numberic value',call.=FALSE)\n\t\t}\n\t}\n\t\n\tif (name == \"RMcorrection\") {\n\t\tif (class(param) != 'logical') {\n\t\t\tstop ('RMcorrection must be a logical value',call.=FALSE)\n\t\t}\n\t}\n\t\n\tif (name == \"RAFcorrection\") {\n\t\tif (class(param) != 'logical') {\n\t\t\tstop ('RAFcorrection must be a logical value',call.=FALSE)\n\t\t}\n\t}\n\t#if (name == \"RAF_tr\") {\n\t#\tif (class(param) == 'numeric' & length(param) != 2) {\n\t#\t\tstop ('RAF_tr must be a numeric vector of length 2',call.=FALSE)\n\t#\t}\n\t#\tif (class(param) != 'numeric' & !is.null(param)) {\n\t#\t\tstop ('RAF_tr must be a numeric vector of length 2',call.=FALSE)\n\t#\t}\n\t#}\n\t\n\tif (name == \"get.what\") {\n\t\topts<-c(\"samples\", \"param\", \"mergedCounts\", \"alleleCountsPerBam\")\n         if(!is.character(param) || length(param)!=1 || !(param %in% opts))\n      \t\tstop(paste(\"'what' should be any one of the options: \\n\", paste(opts,collapse = \", \") ),call.=FALSE )\n\t}\n\t\n\tif (name == \"plot.what\") {\n\t\topts<-c(\"simulation_stats\",\"barplot_per_group\",\"boxplot_per_filter\",\"overall_pie\",\"pie\",\"barplot\",\"boxplot\")\n         if(!is.character(param) || length(param)!=1 || !(param %in% opts))\n      \t\tstop(paste(\"'what' should be any one of the options: \\n\", paste(opts,collapse = \", \") ),call.=FALSE )\n\t}\n\t\n}\n\t\n\n\n\n\n",
    "created" : 1434049489868.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "965209479",
    "id" : "553F230B",
    "lastKnownWriteTime" : 1434049557,
    "path" : "~/Dropbox/FromHome/baal_package/BaalChIP/R/BaalChIP-checks.R",
    "project_path" : "R/BaalChIP-checks.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}
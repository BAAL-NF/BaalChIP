{
    "contents" : "#BaalChIP: all methods\n#Ines de Santiago and Wei Liu (2015) \n\n##initialization method\nsetMethod(\"initialize\",\n          \"BaalChIP\",\n          function(.Object, samplesheet = NULL, hets=NULL) {\n\t\t\t\t\t\n            ##-----check arguments\n            if(missing(samplesheet))stop(\"NOTE: 'samplesheet' is missing!\")    \n            samples <- BaalChIP.checks(name=\"samplesheet\",samplesheet)\n            BaalChIP.checks(name=\"hets\",hets)\n\n            ##-----initialization\n            .Object@samples <- samples\n            .Object@hets <- hets\n            .Object@param <- list()\n            \t\t\t\n            .Object\n          }\n)\n\nsetMethod(\"show\", \"BaalChIP\",\n    function(object){\n    cat(\" Type :\", class(object), \"\\n\")\n    QCstats <- summaryQC(object)[[\"filtering_stats\"]]\n    asb <- object@ASB\n    samples <- object@samples\n    cat(\" Samples                 :  \", nrow(samples), \"\\n\")\n    cat(\" Experiments             :  \", unique(samples[,\"cell_name\"]), \"\\n\")\n    cat(\" Filtering and QC        :  \", ifelse(is.null(QCstats), \"None\", paste(ncol(QCstats), \"filters applied\")), \"\\n\")\n    cat(\" Run allele-specific     :  \", ifelse(length(asb)==0, \"None\", \"Yes: run BaalChIP.get(object, 'ASB')\"), \"\\n\")\n    cat(\"\\n\")\n})\n\n#' Generates allele-specific read count data\n#' @name alleleCounts\n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @description Generates allele-specific read count data from each BAM ChIP-seq dataset for each variant.\n#' @param .Object An object of the \\code{\\link{BaalChIP}} class \n#' @param min_base_quality A numeric value indicating the minumum read base quality below which the base is ignored when summarizing pileup information (default 10)\n#' @param min_mapq A numeric value indicating the minumum mapping quality (MAPQ) below which the entire read is ignored (default 15)\n#' @note BaalChIP computes allelic counts at each variant position with Rsamtools pileup function. The algorithm follows pileup::Rsamtools by automatically excluding reads flagged as unmapped, secondary, duplicate, or not passing quality controls.\n#' @details Utilizes the information whithin the \\code{samples} slot of a BaalChIP object. Will primarly find all variants overlapping peaks. Then, for each variant, computes the number of reads carrying the reference (REF) and alternative (ALT) alleles.\n#' @return An updated \\code{\\link{BaalChIP}} object with the slot \\code{alleleCounts} containing a list of GRanges objects.\n#' @seealso \\code{\\link{BaalChIP.get}}\n#' @examples\n#'setwd(system.file(\"test\",package=\"BaalChIP\"))\n#'samplesheet <- \"example.tsv\"\n#'hets <- c(\"MCF10\"=\"MCF10_hetSNP.txt\", \"GM12891\"=\"GM12891_hetSNP.txt\")\n#'res <- new(\"BaalChIP\", samplesheet=samplesheet, hets=hets)\n#'res <- alleleCounts(res, min_base_quality=10, min_mapq=15)\n#'\n#'#retrieve alleleCounts:\n#'counts <- BaalChIP.get(res, \"alleleCountsPerBam\")\n#'\n#'#alleleCounts are grouped by bam_name and group_name:\n#'names(counts)\n#'names(counts[[\"MCF10\"]])\n#'\n#'#check out the result for one of the bam files:\n#'counts[[\"MCF10\"]][[1]]\n#' @export \nsetMethod(\n  f=\"alleleCounts\",\n  signature=\"BaalChIP\",\n  function(.Object, \n\t\t   min_base_quality=10, \n\t\t   min_mapq=15){\n\t\t\t\t\t\t\t\t\n  ##-----check input arguments\n  samples <- .Object@samples\n  hets <- .Object@hets\n  BaalChIP.checks(name=\"min_base_quality\", min_base_quality)\n  BaalChIP.checks(name=\"min_mapq\", min_mapq)\n   \n  ##-----assign parameters\n  .Object@param$QCparam <- list(min_base_quality=min_base_quality, min_mapq=min_mapq)\n\t\t   \n  ##-----compute allele counts\n  res_per_bam  <- applyAlleleCountsPerBam(samples, hets, min_base_quality, min_mapq)\n  .Object@alleleCounts <- res_per_bam\n  \n  return(.Object)\n  }\n)\n    \n#' Removes variants that may be problematic for identification of allele-specific events\n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @name QCfilter\n#' @description Quality control step for removing variants that may be problematic for identification of allele-specific events.\n#' @param .Object An object of the \\code{\\link{BaalChIP}} class \n#' @param RegionsToFilter a named list of GRanges objects. Variants overlapping these regions will be removed\n#' @param RegionsToKeep a named list of GRanges objects. Works in an oposite way to 'RegionstoFilter', variants NOT overlapping these regions will be removed\n#' @return An updataded \\code{\\link{BaalChIP}} object with the slot \\code{alleleCounts} containing a list of GRanges objects that pass filters.\n#' @seealso \\code{\\link{BaalChIP.get}}, \\code{\\link{plotQC}}, \\code{\\link{summaryQC}}\n#' @examples\n#'setwd(system.file(\"test\",package=\"BaalChIP\"))\n#'samplesheet <- \"example.tsv\"\n#'hets <- c(\"MCF10\"=\"MCF10_hetSNP.txt\", \"GM12891\"=\"GM12891_hetSNP.txt\")\n#'res <- new(\"BaalChIP\", samplesheet=samplesheet, hets=hets)\n#'res <- alleleCounts(res, min_base_quality=10, min_mapq=15)\n#'data(blacklist_hg19)\n#'data(pickrell2011cov1_hg19)\n#'data(UniqueMappability50bp_hg19)\n#'res <- QCfilter(res, \n#'                RegionsToFilter=list(\"blacklist\"=blacklist_hg19, \"highcoverage\"=pickrell2011cov1_hg19), \n#'                RegionsToKeep=list(\"UniqueMappability\"=UniqueMappability50bp_hg19))\n#'\n#'#retrieve alleleCounts:\n#'counts <- BaalChIP.get(res, \"alleleCountsPerBam\")\n#'\n#'#alleleCounts are grouped by bam_name and group_name:\n#'names(counts)\n#'names(counts[[\"MCF10\"]])\n#'\n#'#check out the result for one of the bam files:\n#'counts[[\"MCF10\"]][[1]]\n#' @export \nsetMethod(\n  f=\"QCfilter\",\n  signature=\"BaalChIP\",\n  function(.Object, \n           RegionsToFilter=list(\"blacklist\"=blacklist_hg19, \"highcoverage\"=pickrell2011cov1_hg19),\n           RegionsToKeep=list(\"UniqueMappability\"=UniqueMappability50bp_hg19)){\n\t\t\t\t\t\t\t\t\n  ##-----check input arguments\n  RegionsToFilter <- BaalChIP.checks(name=\"RegionsToFilter\", RegionsToFilter)\n  RegionsToKeep <- BaalChIP.checks(name=\"RegionsToKeep\", RegionsToKeep)\n    \n  ##-----assign parameters\n  counts_per_bam <- .Object@alleleCounts\n  .Object@param$QCparam$RegionsToFilter <- names(RegionsToFilter)\n  .Object@param$QCparam$RegionsToKeep <- names(RegionsToKeep)\n\t\t   \n  ##-----apply filters\n  res_per_bam <- applyFiltersPerBam(counts_per_bam, RegionsToFilter, RegionsToKeep)\n  .Object@alleleCounts <- res_per_bam\n  \n  return(.Object)\n  }\n)\n\n#setMethod(\n#  f=\"filterIntbias\",\n#  signature=\"BaalChIP\",\n#  function(.Object, simul_output){\n#\t\t\t\t\t\t\t\t\n#  ##-----check input arguments\n#  BaalChIP.checks(name=\"simul_output\", simul_output)\n#    \n#  ##-----assign parameters\n#  res_per_bam <- .Object@alleleCounts \n#  samples <- .Object@samples\n#  .Object@param$QCparam$FiltIntBias <- TRUE\n#  .Object@param$QCparam$simul_output <- simul_output\n#\t\n#  ##-----read length per sample\n#  samples$readlen <- applyReadlenPerBam(samples, res_per_bam)\n#   \t   \n#  ##---- run simulations\n#  if (testingScript) {\n#    \t#save so far before running simulations\n#    \ttmpname <- file.path(dirname(samplesheet),paste0(tmpfile_prefix,\"_step1.Rda\"))\n#    \tsave(samples, res_per_bam, file = tmpname)\n#  }\n#    \n#  simul_output <- file.path(simul_output,tmpfile_prefix)\n#  simures <- applySim(samples, res_per_bam, simul_output=simul_output, simulation_script=simulation_script, testingScript=testingScript)\n#  \n#  ##----apply filter\n#  res_per_bam <- applyIntBiasFilterPerBam(samples, res_per_bam, simcounts=simures[[\"simcounts\"]])\n#  \n#  # save so far\n#  if (testingScript) {\n#    \ttmpname <- file.path(dirname(samplesheet),paste0(tmpfile_prefix,\"_step2.Rda\"))\n#    \tsave(samples, res_per_bam, simures, file = tmpname)\n#  }\n#   \n#  \n#  .Object@alleleCounts <- res_per_bam\n#  return(.Object)\n#  }\n#)\n\n\n#' Merges allele-specific read count data per group\n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @name mergePerGroup\n#' @description Merges all ChIP-seq datasets within a group of samples creating a data.frame that contains allele-specific read count data for all variants that need to be analysed. \n#' @param .Object An object of the \\code{\\link{BaalChIP}} class \n#' @details if QCfilter has been applied, will use the most up-to-date variant set available for each individual BAM file (after QC). Missing values are allowed for heterozygous variants that are not available (e.g. do not pass filter for a particular ChIP-seq dataset).\n#' @return An updated \\code{\\link{BaalChIP}} object with the slot \\code{mergedCounts} containing a data.frame of merged samples per group.\n#' @seealso \\code{\\link{BaalChIP.get}}, \\code{\\link{plotQC}}, \\code{\\link{summaryQC}}\n#' @examples\n#'setwd(system.file(\"test\",package=\"BaalChIP\"))\n#'samplesheet <- \"example.tsv\"\n#'hets <- c(\"MCF10\"=\"MCF10_hetSNP.txt\", \"GM12891\"=\"GM12891_hetSNP.txt\")\n#'res <- new(\"BaalChIP\", samplesheet=samplesheet, hets=hets)\n#'res <- alleleCounts(res, min_base_quality=10, min_mapq=15)\n#'data(blacklist_hg19)\n#'data(pickrell2011cov1_hg19)\n#'data(UniqueMappability50bp_hg19)\n#'res <- QCfilter(res, \n#'                RegionsToFilter=list(\"blacklist\"=blacklist_hg19, \"highcoverage\"=pickrell2011cov1_hg19), \n#'                RegionsToKeep=list(\"UniqueMappability\"=UniqueMappability50bp_hg19))\n#'\n#'res <- mergePerGroup(res)\n#'\n#'#retrieve mergedCounts:\n#'counts <- BaalChIP.get(res, \"mergedCounts\")\n#'\n#'#mergedCounts are grouped by group_name:\n#'names(counts)\n#'sapply(counts, dim)\n#'\n#'#check out the result for one of the groups:\n#'head(counts[[1]])\n#' @export \nsetMethod(\n  f=\"mergePerGroup\",\n  signature=\"BaalChIP\",\n  function(.Object){\n  \t\t\t\t\t\t\t\n  ##-----assign parameters\n  res_per_bam <- .Object@alleleCounts\n  samples <- .Object@samples\n  \n  ##-----apply filters\n  res_merged <- applyMergeResults(samples, res_per_bam)\n  .Object@mergedCounts <- res_merged\n  \n  return(.Object)\n  }\n)\n#' Filters out variants with only 1 observed allele\n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @name filter1allele\n#' @description Filters the data frame available within a \\code{\\link{BaalChIP}} object (slot \\code{mergedCounts}). This filter ignores variants for which only one allele is observed after pooling ChIP-seq reads from all datasets. \n#' @param .Object An object of the \\code{\\link{BaalChIP}} class \n#' @return An updated \\code{\\link{BaalChIP}} object with the slot \\code{mergedCounts} containing a data.frame of merged samples per group with variants that pass the filter.\n#' @seealso \\code{\\link{BaalChIP.get}}, \\code{\\link{plotQC}}, \\code{\\link{summaryQC}}\n#' @examples\n#'setwd(system.file(\"test\",package=\"BaalChIP\"))\n#'samplesheet <- \"example.tsv\"\n#'hets <- c(\"MCF10\"=\"MCF10_hetSNP.txt\", \"GM12891\"=\"GM12891_hetSNP.txt\")\n#'res <- new(\"BaalChIP\", samplesheet=samplesheet, hets=hets)\n#'res <- alleleCounts(res, min_base_quality=10, min_mapq=15)\n#'data(blacklist_hg19)\n#'data(pickrell2011cov1_hg19)\n#'data(UniqueMappability50bp_hg19)\n#'res <- QCfilter(res, \n#'                RegionsToFilter=list(\"blacklist\"=blacklist_hg19, \"highcoverage\"=pickrell2011cov1_hg19), \n#'                RegionsToKeep=list(\"UniqueMappability\"=UniqueMappability50bp_hg19))\n#'\n#'res <- mergePerGroup(res)\n#'res <- filter1allele(res)\n#'\n#'#retrieve mergedCounts:\n#'counts <- BaalChIP.get(res, \"mergedCounts\")\n#'\n#'#mergedCounts are grouped by group_name:\n#'names(counts)\n#'sapply(counts, dim)\n#'\n#'#check out the result for one of the groups:\n#'head(counts[[1]])\n#' @export \nsetMethod(\n   f=\"filter1allele\",\n   signature=\"BaalChIP\",\n   function(.Object){\n  \t\t\t\t\t\t\t\n   ##-----assign parameters\n   res_merged <- .Object@mergedCounts\n  \n   ##-----apply filters\n   res_merged <- applyFilter1allele(res_merged)\n   .Object@mergedCounts <- res_merged\n  \n   return(.Object)\n   }\n)\n\n\n\n#' BaalChIP pipeline - allele counts and QC\n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @name BaalChIP.QC\n#' @description BaalChIP.QC is a wrapper convenience function, to compute allele counts and perform quality controls in one step. This function will use the package's defaults.\n#' @param .Object An object of the \\code{\\link{BaalChIP}} class\n#' @details This function is a wrapper of the following functions: \\code{\\link{alleleCounts}}, \\code{\\link{QCfilter}}, \\code{\\link{mergePerGroup}}, \\code{\\link{filter1allele}}\n#' @return An object of the \\code{\\link{BaalChIP}} class.\n#' @seealso \\code{\\link{summaryQC}}, \\code{\\link{plotQC}}\n#' @examples\n#'setwd(system.file(\"test\",package=\"BaalChIP\"))\n#'samplesheet <- \"example.tsv\"\n#'hets <- c(\"MCF10\"=\"MCF10_hetSNP.txt\", \"GM12891\"=\"GM12891_hetSNP.txt\")\n#'res <- new(\"BaalChIP\", samplesheet=samplesheet, hets=hets)\n#'res <- BaalChIP.QC(res)\n#'\n#'#summary of the QC step\n#'summaryQC(res)\n#' @export \n\nsetMethod(\n  f=\"BaalChIP.QC\",\n  signature=\"BaalChIP\",\n  function(.Object){\n\t\t#simul_output=NULL)\n\t\t\t\t\t\t\t\t\n    ##----- compute allele counts\n    .Object <- alleleCounts(.Object, min_base_quality=10, min_mapq=15)\n\t\n    ##-----run QC step\n    data(blacklist_hg19)\n    data(pickrell2011cov1_hg19)\n    data(UniqueMappability50bp_hg19)\n    .Object <- QCfilter(.Object, RegionsToFilter=c(\"blacklist_hg19\",\"pickrell2011cov1_hg19\"), \n                        RegionsToKeep=c(\"UniqueMappability50bp_hg19\"))\n    \n    #if (FiltIntBias == FALSE & !is.null(simul_output)) {\n\t  #\t\twarning (paste(\"will not use 'simul_output' because FiltIntBias is FALSE\"))\n\t  #\n\t\n    ##-----merge replicates\n    cat(\"-merging replicated samples\\n\")\n    .Object <- mergePerGroup(.Object)\n    \n    ##-----filter 'Only1Allele'\n    cat(\"-filtering out SNPs with only 1 observed allele\\n\")\n    .Object <- filter1allele(.Object)\n    \n    cat(\"-QC complete!\\n\\n\")\n    .Object\n  }\n)\n\n#' Identifies allele-specific binding events\n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @name getASB\n#' @description getASB identifies allele-specific binding events using a bayesian framework.\n#' @param .Object An object of the \\code{\\link{BaalChIP}} class.\n#' @param Iter Maximun number of iterations (default 5000)\n#' @param conf_level Confidence interval in the estimated allelic ratio (default 0.95)\n#' @param RMcorrection Logical value indicating if reference mapping (RM) bias should be applied (default TRUE). If FALSE will not correct for reference allele mapping bias. If TRUE will estimate the RM bias from the overall reference allele proportion \n#' @param RAFcorrecion Logical value indicating if relative allele frequency (RAF) bias correction should be applyed (default TRUE). If TRUE will read RAF values for each variant from \\code{hets} files (RAF column name). If FALSE will not correct for relative allele frequency bias\n#' @return An updated \\code{\\link{BaalChIP}} object with the slot \\code{ASB} containing variants identified as allele-specific.\n#' @seealso \\code{\\link{summaryASB}}, \\code{\\link{BaalChIP.report}}\n#' @examples\n#'setwd(system.file(\"test\",package=\"BaalChIP\"))\n#'samplesheet <- \"example.tsv\"\n#'hets <- c(\"MCF10\"=\"MCF10_hetSNP.txt\", \"GM12891\"=\"GM12891_hetSNP.txt\")\n#'res <- new(\"BaalChIP\", samplesheet=samplesheet, hets=hets)\n#'res <- BaalChIP.QC(res)\n#'res <- getASB(res)\n#'\n#'#summary - number of significant ASB variants\n#'summaryASB(res)\n#'\n#'#report result\n#'res <- BaalChIP.report(res)\n#' @export \nsetMethod(\n  \"getASB\",\n  \"BaalChIP\",\n  function(.Object, Iter=5000, conf_level=0.95, RMcorrection = TRUE, RAFcorrection=TRUE){\n\t\t\t\t\t\t\t\t\n    ##-----check input arguments\n    #\n    BaalChIP.checks(name=\"Iter\", Iter)\n    BaalChIP.checks(name=\"conf_level\", conf_level)\n    BaalChIP.checks(name=\"RMcorrection\", RMcorrection)\n    BaalChIP.checks(name=\"RAFcorrection\", RAFcorrection)  \n    \n\t##-----updade object with \"assayedVar\" and \"GTtable\"\n\tassayedVar <- BaalChIP.get(.Object, \"mergedCounts\") #last filtered mergedCounts\n\thets=.Object@hets\n    .Object@assayedVar <- assayedVar\n    VarTable <- get_Vartable(assayedVar, hets)\n    .Object@VarTable <- VarTable\n    \n    ##-----check matching cellnames\n    cells1 <- unique(.Object@samples$cell_name)\n    checkmatchingnames(names(.Object@assayedVar), cells1)\n    checkmatchingnames(names(.Object@VarTable), cells1)\n    \n    ##-----run\n    Expnames <- names(assayedVar)\n    results <- list()\n    biasTable <- list()\n    applyedCorrection <- list()\n    \n    for (ID in Expnames) {\n      print (paste(\"... running for:\", ID))\n    \tassayed <- assayedVar[[ID]]\n    \tGTtable <- VarTable[[ID]]\n    \t\n    \t#if no RAF replace any RAF values by 0.5\n    \tif (!RAFcorrection) {GTtable$RAF <- 0.5}\n    \t\n    \t#get bias table (variants ordered equally between counts table and biastable)\n    \tif (RMcorrection) {ARestimate <- estimateRefBias(assayed,GTtable,remove_percentile=0, min_n=200, RAF_tr=NULL)}else{ARestimate=NULL}\n    \tresult <- getbiasTable(assayed, GTtable, ARestimate) \n    \tcounts <- result[[1]]\n    \tbiastable <- result[[2]]\n    \tbiasparam <- getbiasparam(biastable)\n    \t\n    \t#run bayes\n    \tBayes_report <- runBayes(counts=counts, bias=biastable, Iter=Iter, conf_level=conf_level) \n    \t\n    \t#append results\n    \tresults[[ID]] <- Bayes_report\n    \tbiasTable[[ID]] <- biastable\t\n    \tapplyedCorrection[[ID]] <- biasparam\n    }\n    \n\n    ##-----assign parameters\n    applyedCorrection <- t(do.call(\"rbind\",applyedCorrection))\n\t .Object@param$ASBparam <- list(Iter=Iter, conf_level=conf_level, applyedCorrection=applyedCorrection, RAFcorrection=RAFcorrection)\n\t\n    ##-----updade status and return\n    .Object@biasTable <- biasTable\n    .Object@ASB <- results\n    \n    cat(\"-ASB identification complete!\\n\\n\")\n    .Object\n  }\n)\t\t\t\n\n#' Get slots from a BaalChIP object\n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @name BaalChIP.get\n#' @description Get information from individual slots in a BaalChIP object.\n#' @param .Object An object of the \\code{\\link{BaalChIP}} class\n#' @param what a single character value specifying which information should be retrieved. Options: 'samples', 'param', 'alleleCountsPerBam', 'mergedCounts'\n#' @return The slot content from an object of the \\code{\\link{BaalChIP}} class.\n#' @examples\n#'data(BaalObject)\n#'\n#'#samples data spreadsheet and hets:\n#'BaalChIP.get(BaalObject,\"samples\")\n#'\n#'#parameters used within run:\n#'BaalChIP.get(BaalObject,\"param\")\n#'\n#'#retrieve a GRanges list with allele-specific read counts per BAM file:\n#'counts <- BaalChIP.get(BaalObject,\"alleleCountsPerBam\")\n#'counts[[\"MCF10\"]][[1]]\n#'\n#'#retrieve a data.frame with allele-specific read counts per group:\n#'counts <- BaalChIP.get(BaalObject,\"mergedCounts\")\n#'head(counts[[1]])\n#' @export \nsetMethod(\n  \"BaalChIP.get\",\n  \"BaalChIP\",\n  function(.Object, what=c(\"samples\",\"param\",\"alleleCountsPerBam\",\"mergedCounts\")) {\n    ##-----check input arguments\n    BaalChIP.checks(name=\"get.what\",param=what)\n    ##-----get query\n    query<-NULL\n    if(what==\"samples\"){\n      query<- list(\"samples\"=.Object@samples,\"hets\"=.Object@hets)\n    } else if(what==\"param\"){\n      query<-.Object@param     \n    } else if(what==\"mergedCounts\"){\n      query<- lapply(.Object@mergedCounts, function (x) {x[[length(x)]]})     \n    } else if(what==\"alleleCountsPerBam\"){\n      query <-  lapply(.Object@alleleCounts, lapply, function (x) {x[[length(x)]]})\n    } \n    return(query)\n  }\n)\n\n\n#' Report ASB variants\n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @name BaalChIP.report\n#' @description Generates a data.frame per group with significant allele-specific binding (ASB) variants\n#' @param .Object An object of the \\code{\\link{BaalChIP}} class\n#' @return A named list, with a data.frame per group. \n#' @details The reported data frame contains the following columns: \n#' \\itemize{\n#' \\item ID: unique identifier string per analysed variant\n#' \\item Bayes_lower: Lower interval for the estimated allelic ratio (allelic ratio is given by REF / TOTAL)\n#' \\item Bayes_upper: Uper interval for the estimated allelic ratio (allelic ratio is given by REF / TOTAL)\n#' \\item Bayes_sig_A: classification of variants into allele-specific towards the reference allele. 1/0 means TRUE/FALSE \n#' \\item Bayes_sig_B: classification of variants into allele-specific towards the non-reference allele. 1/0 means TRUE/FALSE \n#' }\n#' @seealso \\code{\\link{summaryASB}}, \\code{\\link{getASB}}\n#' @examples\n#' data(BaalObject)\n#' report <- BaalChIP.report(BaalObject)\n#' \n#' #the reported list is grouped by group_name:\n#' names(report)\n#' \n#' #check out the report for one of the groups:\n#' head(report[[\"MCF10\"]])\n#' @export \n\nsetMethod(\n  \"BaalChIP.report\",\n  \"BaalChIP\",\n  function(.Object) {\n    query<-.Object@ASB \n    return(query)\n  }\n)\n\n\n#' Summary of QC \n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @name summaryQC\n#' @description Generates summary of QC result.\n#' @param .Object An object of the \\code{\\link{BaalChIP}} class\n#' @return A list with two elements: \n#' \\itemize{\n#' \\item \\code{filtering_stats} containning the number of variants that were filtered out in each filter category and the total number that 'pass' all filters \n#' \\item \\code{average_stats} containning the average number and average percentage of variants in each filter category, averaged across all analysed groups\n#' }\n#' @seealso \\code{\\link{BaalChIP.QC}}, \\code{\\link{plotQC}}\n#' @examples\n#'data(BaalObject) \n#'summaryQC(BaalObject)\n#' @export \nsetMethod(\n  \"summaryQC\",\n  \"BaalChIP\",\n  function(.Object) {\n    query <- summary_QC(.Object)\n    return(query)\n  }\n)\n\n\n#' Summary of ASB test\n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @name summaryASB\n#' @description Generates summary of ASB test result.\n#' @param .Object An object of the \\code{\\link{BaalChIP}} class\n#' @return A matrix containning the total number of allele-specific variants (TOTAL) and the number of variants allele-specific for the reference (REF) and alternate alleles (ALT).\n#' @seealso \\code{\\link{getASB}}, \\code{\\link{BaalChIP.report}}\n#' @examples\n#'data(BaalObject) \n#'summaryASB(BaalObject)\n#' @export \nsetMethod(\n  \"summaryASB\",\n  \"BaalChIP\",\n  function(.Object) {\n    query <- summary_ASB(.Object)\n    return(query)\n  }\n)\n\n#' Plots QC results\n#' @author Ines de Santiago, Wei Liu, Ke Yuan, Florian Markowetz\n#' @name plotQC\n#' @description Produces different plots of QC results.\n#' @param .Object An object of the \\code{\\link{BaalChIP}} class.\n#' @param what A single character value indicating the type of plot. Options: \n#' \\itemize{\n#' \\item \\code{overall_pie}: plots the average percentage of variants in each filter category (averaged across all groups analysed)\n#' \\item \\code{boxplot_per_filter}: plots the number of variants that were filtered out per filter category\n#' \\item \\code{barplot_per_group}: plots the number of variants that were filtered out per group\n#' }\n#' @param addlegend A logical value indicating if legend should be included in the plot (default TRUE)\n#' @seealso \\code{\\link{BaalChIP.QC}}, \\code{\\link{summaryQC}}\n#' #' @examples\n#'data(BaalObject) \n#'plotQC(BaalObject, \"overall_pie\")\n#'plotQC(BaalObject, \"boxplot_per_filter\", addlegend=FALSE)\n#'plotQC(BaalObject, \"barplot_per_group\")\n#' @export \nsetMethod(\n  \"plotQC\",\n  \"BaalChIP\",\n  function(.Object, what= c(\"overall_pie\", \"boxplot_per_filter\", \"barplot_per_group\"), addlegend=TRUE) {\n    ##-----check input arguments\n    if (what == \"pie\") {what <- \"overall_pie\"}\n    if (what == \"boxplot\") {what <- \"boxplot_per_filter\"}\n    if (what == \"barplot\") {what <- \"barplot_per_group\"}\n    BaalChIP.checks(name=\"plot.what\",para=what)\n    \n    stats <- summary_QC(.Object)\n    \n    plotfilters(stats=stats, what=what, addlegend=addlegend)\n  }\n)\n\n\n\n\n\n\n\n\n\n",
    "created" : 1434020556278.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3248859539",
    "id" : "1E08F9A3",
    "lastKnownWriteTime" : 1434049932,
    "path" : "~/Dropbox/FromHome/baal_package/BaalChIP/R/BaalChIP-methods.R",
    "project_path" : "R/BaalChIP-methods.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}